# yaml-language-server: $schema=https://json.schemastore.org/prometheus.json
#
# Scrape config for Docker Compose services
# 
scrape_configs:
  - job_name: 'docker/compose'

    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 10s

    relabel_configs:
      # ================================================================================
      # Keep or drop targets with the following rules
      # ================================================================================

      # io.prometheus.enabled=<true|false>
      - source_labels:
        - __meta_docker_container_label_io_prometheus_enabled
        regex: 'true'
        action: keep

      # - io.prometheus.dockerswarm-tasks.should_be_scraped=<true|false>
      - source_labels:
        - __meta_docker_container_label_io_prometheus_dockerswarm_tasks_should_be_scraped
        regex: 'false'
        action: drop

      # Drop one-off tasks
      - source_labels:
        - __meta_docker_container_label_com_docker_compose_oneoff
        regex: 'True'
        action: drop

      # Keep only tasks connected to the "prometheus" network
      - source_labels:
        - __meta_docker_network_name
        regex: (^prometheus$)
        action: keep

      # ================================================================================
      # Override prometheus internal labels
      # ================================================================================

      # io.prometheus.scrape_scheme=<scheme>
      - source_labels:
        - __meta_docker_container_label_io_prometheus_scrape_scheme
        target_label: __scheme__
        regex: (https?)

      # io.prometheus.scrape_port=<port>
      - source_labels:
        - __meta_docker_container_label_io_prometheus_scrape_port
        - __address__
        target_label: __meta_docker_container_label_io_prometheus_scrape_port
        separator: ';'
        regex: (\d+);(?:[^:]+)(?::(\d+))?
        replacement: $1

      # io.prometheus.metrics_path=<path>
      - source_labels:
        - __meta_docker_container_label_io_prometheus_metrics_path
        - __metrics_path__
        target_label: __meta_docker_container_label_io_prometheus_metrics_path
        separator: ';'
        regex: ;(.*)
        replacement: $1
      - source_labels:
        - __meta_docker_container_label_io_prometheus_metrics_path
        target_label: __metrics_path__

      # io.prometheus.param_<name>=<value>
      - regex: __meta_docker_container_label_io_prometheus_param_(.+)
        action: labelmap
        replacement: __param_$1

      # If service is replicated, set "job_id" label to "<job>/<service_name>/<task_slot>"
      - source_labels:
        - job
        - __meta_docker_container_label_com_docker_compose_project
        - __meta_docker_container_label_com_docker_compose_service
        - __meta_docker_container_label_com_docker_compose_container_number
        target_label: id
        separator: '/'

      # Override "job" label to Docker Swarm's Service Name combined with "namespace" labels
      # e.g. <com.docker.stack.namespace>/<io.prometheus.job_name>
      - source_labels:
          - __meta_docker_container_label_io_prometheus_job_name
          - __meta_docker_container_label_com_docker_compose_service
        target_label: __meta_docker_container_label_io_prometheus_job_name
        separator: ';'
        regex: ;(.*)
        replacement: $1
      - source_labels:
        - __meta_docker_container_label_com_docker_compose_project
        - __meta_docker_container_label_io_prometheus_job_name
        target_label: job
        separator: /

      # ================================================================================
      # Label mapping
      # ================================================================================
      - action: labelmap
        regex: __meta_docker_container_label_com_(docker_compose_.+)

      # Drop extra labels
      - action: labeldrop
        regex: docker_compose_(oneoff|image|config_hash|project_config_files|project_working_dir)

      # ================================================================================
      # Kubernetes compatible relabeling
      # - namespace
      # - deployment
      # - pod
      # ================================================================================

      # Use the "com.docker.compose.project" service label as Kubernetes "namespace" label.
      - source_labels: [__meta_docker_container_label_com_docker_compose_project]
        action: replace
        target_label: namespace

      # Reuse the "com.docker.compose.project" label for the "deployment" name.
      - source_labels: [__meta_docker_container_label_com_docker_compose_project]
        action: replace
        target_label: deployment
      # Reuse the "com.docker.compose.project" & "com.docker.compose.service" label for the "pod" name.
      - source_labels:
          - __meta_docker_container_label_com_docker_compose_project
          - __meta_docker_container_label_com_docker_compose_service
          - __meta_docker_container_label_com_docker_compose_container_number
        separator: '.'
        target_label: pod
      # Generate "container" label from the "com.docker.compose.project", "com.docker.compose.service" and "com.docker.compose.container-number".
      - source_labels: 
          - __meta_docker_container_label_com_docker_compose_project
          - __meta_docker_container_label_com_docker_compose_service
          - __meta_docker_container_label_com_docker_compose_container_number
        separator: '.'
        target_label: task
